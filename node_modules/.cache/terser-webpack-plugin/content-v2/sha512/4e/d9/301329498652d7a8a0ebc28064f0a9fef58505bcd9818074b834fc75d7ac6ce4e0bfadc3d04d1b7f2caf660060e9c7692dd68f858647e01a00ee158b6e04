{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{219:function(n,e,t){\"use strict\";t.r(e);var o=t(0),r=Object(o.a)({},(function(){var n=this.$createElement,e=this._self._c||n;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":this.$parent.slotKey}},[e(\"h3\",{attrs:{id:\"vue组件通信方法\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#vue组件通信方法\"}},[this._v(\"#\")]),this._v(\" VUE组件通信方法\")]),this._v(\" \"),e(\"div\",{staticClass:\"language- extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[this._v(\"// 由一个组件，向上找到最近的指定组件\\nfunction findComponentUpward (context, componentName) {\\n    let parent = context.$parent;\\n    let name = parent.$options.name;\\n\\n    while (parent && (!name || [componentName].indexOf(name) < 0)) {\\n        parent = parent.$parent;\\n        if (parent) name = parent.$options.name;\\n    }\\n    return parent;\\n}\\nexport { findComponentUpward };\\n\\n// 由一个组件，向上找到所有的指定组件\\nfunction findComponentsUpward (context, componentName) {\\n    let parents = [];\\n    const parent = context.$parent;\\n\\n    if (parent) {\\n        if (parent.$options.name === componentName) parents.push(parent);\\n        return parents.concat(findComponentsUpward(parent, componentName));\\n    } else {\\n        return [];\\n    }\\n}\\nexport { findComponentsUpward };\\n\\n// 由一个组件，向下找到最近的指定组件\\nfunction findComponentDownward (context, componentName) {\\n    const childrens = context.$children;\\n    let children = null;\\n\\n    if (childrens.length) {\\n        for (const child of childrens) {\\n            const name = child.$options.name;\\n\\n            if (name === componentName) {\\n                children = child;\\n                break;\\n            } else {\\n                children = findComponentDownward(child, componentName);\\n                if (children) break;\\n            }\\n        }\\n    }\\n    return children;\\n}\\nexport { findComponentDownward };\\n\\n// 由一个组件，向下找到所有指定的组件\\nfunction findComponentsDownward (context, componentName) {\\n    return context.$children.reduce((components, child) => {\\n        if (child.$options.name === componentName) components.push(child);\\n        const foundChilds = findComponentsDownward(child, componentName);\\n        return components.concat(foundChilds);\\n    }, []);\\n}\\nexport { findComponentsDownward };\\n\\n// 由一个组件，找到指定组件的兄弟组件\\nfunction findBrothersComponents (context, componentName, exceptMe = true) {\\n    let res = context.$parent.$children.filter(item => {\\n        return item.$options.name === componentName;\\n    });\\n    let index = res.findIndex(item => item._uid === context._uid);\\n    if (exceptMe) res.splice(index, 1);\\n    return res;\\n}\\nexport { findBrothersComponents };\\n\\nfunction typeOf(obj) {\\n    const toString = Object.prototype.toString;\\n    const map = {\\n        '[object Boolean]'  : 'boolean',\\n        '[object Number]'   : 'number',\\n        '[object String]'   : 'string',\\n        '[object Function]' : 'function',\\n        '[object Array]'    : 'array',\\n        '[object Date]'     : 'date',\\n        '[object RegExp]'   : 'regExp',\\n        '[object Undefined]': 'undefined',\\n        '[object Null]'     : 'null',\\n        '[object Object]'   : 'object'\\n    };\\n    return map[toString.call(obj)];\\n}\\n// deepCopy\\nfunction deepCopy(data) {\\n    const t = typeOf(data);\\n    let o;\\n\\n    if (t === 'array') {\\n        o = [];\\n    } else if ( t === 'object') {\\n        o = {};\\n    } else {\\n        return data;\\n    }\\n\\n    if (t === 'array') {\\n        for (let i = 0; i < data.length; i++) {\\n            o.push(deepCopy(data[i]));\\n        }\\n    } else if ( t === 'object') {\\n        for (let i in data) {\\n            o[i] = deepCopy(data[i]);\\n        }\\n    }\\n    return o;\\n}\\n\\nexport {deepCopy};\\n\")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}