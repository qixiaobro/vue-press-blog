{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{218:function(t,s,a){\"use strict\";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h3\",{attrs:{id:\"对象的新增方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#对象的新增方法\"}},[t._v(\"#\")]),t._v(\" 对象的新增方法\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"object.is()\")]),a(\"br\"),t._v(\"\\nES5的比较两个值相等的方法\"),a(\"br\"),t._v(\"\\n==:缺点，会自动转换数据类型\"),a(\"br\"),t._v(\"\\n===:缺点，NaN不等于自身，以及+0等于-0。\"),a(\"br\"),t._v(\"\\nES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。\"),a(\"code\",[t._v(\"Object.is\")]),t._v(\"就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。不同之处只有两个：一是+0不等于-0，二是NaN等于自身。\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"object.assign()\")]),a(\"br\"),t._v(\"\\n用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。\")])])]),t._v(\" \"),a(\"div\",{staticClass:\"language-javascript extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" target \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" a\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" source1 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" b\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" source2 \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" c\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\nObject\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"assign\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"target\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" source1\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" source2\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\ntarget \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// {a:1, b:2, c:3}\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。\")]),t._v(\" \"),a(\"blockquote\",[a(\"ul\",[a(\"li\",[t._v(\"浅拷贝\")]),t._v(\" \"),a(\"li\",[t._v(\"同名属性会被替换\")]),t._v(\" \"),a(\"li\",[t._v(\"处理数组，把数组视为属性名为 0、1、2 的对象\")]),t._v(\" \"),a(\"li\",[t._v(\"取值函数的处理，会先求值再复制。\")])])]),t._v(\" \"),a(\"p\",[t._v(\"常见用途：\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"为对象添加属性\")]),t._v(\" \"),a(\"li\",[t._v(\"为对象添加方法\")]),t._v(\" \"),a(\"li\",[t._v(\"克隆对象\")]),t._v(\" \"),a(\"li\",[t._v(\"合并对象\")]),t._v(\" \"),a(\"li\",[t._v(\"为属性指定默认值\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"Object.keys()、Object.values()、Object.entries()\")]),t._v(\" \"),a(\"code\",[t._v(\"Object.keys()\")]),t._v(\"返回一个数组，成员是参数对象自身的（不含继承）所有可遍历属性的键名。\"),a(\"br\"),t._v(\" \"),a(\"code\",[t._v(\"Object.values()\")]),t._v(\"返回一个数组，成员是参数对象自身的（不含继承）所有可遍历属性的键值。会过滤掉属性名为Symbol值的属性。\"),a(\"br\"),t._v(\" \"),a(\"code\",[t._v(\"Object.entries()\")]),t._v(\"返回一个数组，成员是参数对象自身的不含继承）所有可遍历属性的键值对数组。 会过滤掉属性名为Symbol值的属性。  基本用途：遍历对象的属性。将对象转为真正的Map结构。\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-javascript extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" obj \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\" foo\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v(\"'bar'\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" baz\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\":\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"42\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"const\")]),t._v(\" map \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Map\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"Object\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"entries\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"obj\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\nmap \"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v('// Map { foo: \"bar\", baz: 42 }')]),t._v(\"\\n\")])])]),a(\"p\",[a(\"code\",[t._v(\"Object.fromEntries()\")]),a(\"br\"),t._v(\"\\n是\"),a(\"code\",[t._v(\"Object.entries()\")]),t._v(\"的逆操作，用于将一个键值对数组转为对象。特别适合Map结构。\")])])}),[],!1,null,null,null);s.default=e.exports}}]);","extractedComments":[]}